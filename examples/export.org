#+TITLE: Export Example
#+AUTHOR: SDK
#+DATE: 2015/6/28 19:49:6

* Section 1

  Hoge

  #+BEGIN_SRC coq
    Require Import List.
  #+END_SRC

  #+BEGIN_SRC haskell
  import Data.List
  #+END_SRC

  - [[file:MonadKleisli.org][Link]]
  - [[http://www.mathink.net]]

** Subsection 1

   Foo $\langle M, \bullet, \epsilon \rangle$
 
  #+BEGIN_SRC coq
     Class Monoid: Type :=
       {
         carrier: Type;
         op: carrier -> carrier -> carrier;
         unit: carrier;
  #+end_src
  
   - monad law 1
   - monad law 2
   - monad law 3

  #+begin_src coq
         mon1x: forall x, op unit x = x;
         monx1: forall x, op x unit = x;
         monA: forall x y z, op (op x y) z = op x (op y z)
       }.
     Coercion carrier: Monoid >-> Sortclass.
   #+END_SRC

** Subsection 2

   bar *buz* [fn::this is foot-note]

* Section 2

  Fire [fn:are]


[fn:are] this is second foot-node
** Subsection 1

   Yoga *日本語の強調はつらい*

*** Subsubsection 1

    It's an instance of =Monoid= .

    #+BEGIN_SRC coq
      Instance listMonoid (A: Type): Monoid :=
        {
          carrier := list A;
          op l1 l2 := l1 ++ l2;
          unit := nil
        }.
    #+END_SRC


    #+BEGIN_EXAMPLE
3 subgoals, subgoal 1 (ID 14)
  
  A : Type
  ============================
   forall x : list A, nil ++ x = x

subgoal 2 (ID 15) is:
 forall x : list A, x ++ nil = x
subgoal 3 (ID 16) is:
 forall x y z : list A, (x ++ y) ++ z = x ++ y ++ z

(dependent evars:)
    #+END_EXAMPLE

**** Monoid Law 1
     
     #+BEGIN_EXAMPLE
subgoal 1 (ID 14) is:
  
  A : Type
  ============================
   forall x : list A, nil ++ x = x
     #+END_EXAMPLE

     #+BEGIN_SRC coq
       - now idtac.
     #+END_SRC

**** Monoid Law 2

     #+BEGIN_EXAMPLE
subgoal 2 (ID 15) is:
  
  A : Type
  ============================
   forall x : list A, x ++ nil = x
     #+END_EXAMPLE
     
     #+BEGIN_SRC coq
       - now  apply app_nil_r.
     #+END_SRC

**** Monoid Law 3
     
     #+BEGIN_EXAMPLE
subgoal 3 (ID 16) is:
  
  A : Type
  ============================
   forall x y z : list A, (x ++ y) ++ z = x ++ y ++ z
     #+END_EXAMPLE
     
     #+BEGIN_SRC coq
       - now intros; rewrite app_assoc.
     #+END_SRC

     #+BEGIN_SRC coq
       Defined.
     #+END_SRC
